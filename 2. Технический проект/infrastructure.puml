@startuml
!define C4P https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master
!includeurl C4P/C4_Container.puml

title C4 Infrastructure Diagram - Сервис парковки с шардингом и репликацией

package "Яндекс.Облако" as cloud {
    Container(nginx, "Nginx", "Nginx", "Обратный прокси и балансировщик нагрузки")

    package "Kubernetes Cluster" as k8s_cluster {
        package "Auth Pod" as auth_pod {
            Container(auth_service, "Auth Service", "Java, Spring Boot", "Шлюз авторизации и аутентификации")
        }

        package "Parking Pod" as parking_pod {
            Container(parking_service, "Parking Service", "Java, Spring Boot", "Управление парковками")
        }

        package "Search Pod" as search_pod {
            Container(search_service, "Search Service", "Java, Spring Boot", "Сервис поиска и маршрутизации")
        }

        package "Payment Pod" as payment_pod {
            Container(payment_service, "Payment Service", "Java, Spring Boot", "Сервис оплаты и тарификации")
        }

        package "Notification Pod" as notification_pod {
            Container(notification_service, "Notification Service", "Java, Spring Boot", "Сервис уведомлений")
        }

        package "Support Pod" as support_pod {
            Container(support_service, "Support Service", "Java, Spring Boot", "Сервис техподдержки")
        }

        package "Report Pod" as report_pod {
            Container(report_service, "Report Service", "Java, Spring Boot", "Сервис отчетов и аналитики")
        }

        package "User Pod" as user_pod {
            Container(user_service, "User Service", "Java, Spring Boot", "Сервис управления пользователями")
        }

        package "Session Pod" as session_pod {
            Container(session_service, "Session Service", "Java, Spring Boot", "Сервис сессий")
        }

        package "Session Pod" as session_pod {
            Container(session_service, "Session Service", "Java, Spring Boot", "Сервис сессий")
        }
    }

    Container(kafka, "Брокер сообщений", "Apache Kafka", "Асинхронная обработка событий между сервисами")
}

package "Database Server" as database {
    package "Region 1" as region1 {
        Container(database_r1_master, "PostgreSQL Master", "PostgreSQL", "Основная база данных для региона 1")
        Container(database_r1_replica, "PostgreSQL Replica", "PostgreSQL", "Реплика базы данных для региона 1")
    }

    package "Region n" as regionn {
        Container(database_rn_master, "PostgreSQL Master", "PostgreSQL", "Основная база данных для региона n")
        Container(database_rn_replica, "PostgreSQL Replica", "PostgreSQL", "Реплика базы данных для региона n")
    }
}

System_Ext(maps_service, "Сервис карт", "Я.Карты Maps API")
System_Ext(geocoder_service, "Геокодер", "Я.Карты Geocoder API")
System_Ext(payment_system, "Платёжная система", "Монета API")
System_Ext(email_service, "Почтовая служба", "[Mailcow]")

' Соединения между сервисами и базами данных в каждом регионе
Rel(k8s_cluster, database , "Чтение/Запись", "JDBC")

' Соединения между мастерами и репликами для репликации данных
Rel_D(database_r1_master, database_r1_replica, "Репликация", "Streaming")
Rel_D(database_rn_master, database_rn_replica, "Репликация", "Streaming")

' Взаимодействие с внешними системами
Rel(parking_service, geocoder_service, "Запрос данных по адресу парковки", "REST API")
Rel(search_service, maps_service, "Запрос карт и маршрутов", "REST API")
Rel(payment_service, payment_system, "Запрос обработки платежей", "REST API")
Rel(notification_service, email_service, "Отправка уведомлений", "REST API")

' Соединение Nginx с сервисами
Rel(nginx, k8s_cluster, "Проксирование запросов", "HTTP")

Rel(k8s_cluster, kafka, "Публикация событий о авторизациях", "Kafka Producer API")

k8s_cluster ---[hidden]---> database
parking_service ---[hidden]---> geocoder_service
search_service ---[hidden]---> maps_service
payment_service ---[hidden]---> payment_system
auth_service ---[hidden]---> email_service
@enduml
